Drupal User Login in Next.js Using NextAuth Credentials Provider
In this guide, we‚Äôll walk through how to authenticate Drupal users (via username and password) in a Next.js (App Router) application using NextAuth.js with the Credentials Provider.

üß© Why This Approach?
By default, NextAuth supports social logins (like Google), but if you want to authenticate users who already exist in your Drupal site, you can leverage Drupal's built-in /user/login?_format=json endpoint and use the Credentials Provider in NextAuth.

‚úÖ Requirements
Drupal site with simple_oauth and/or core user login functionality enabled

Next.js App Router project

A registered user in Drupal (e.g. username: hd, password: hd)

üõ†Ô∏è Step 1: Create Drupal Login API in NextAuth
In app/api/auth/[...nextauth]/route.ts, configure the Credentials provider like this:

ts
Copy
Edit
import NextAuth from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";

const handler = NextAuth({
  providers: [
    CredentialsProvider({
      name: "Drupal Credentials",
      credentials: {
        username: { label: "Username", type: "text" },
        password: { label: "Password", type: "password" },
      },
      async authorize(credentials) {
        const res = await fetch("http://your-drupal-site.ddev.site/user/login?_format=json", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            name: credentials?.username,
            pass: credentials?.password,
          }),
        });

        const data = await res.json();

        if (!res.ok || !data.current_user) return null;

        return {
          id: data.current_user.uid,
          name: data.current_user.name,
        };
      },
    }),
  ],
  session: { strategy: "jwt" },
  pages: {
    signIn: "/login",
  },
});

export { handler as GET, handler as POST };
üìù Key Point:
Drupal‚Äôs /user/login endpoint expects name (username) and pass (password), not email.

üßë‚Äçüíª Step 2: Create a Login Form in Next.js
In app/login/page.tsx, create a form that collects the username and password, then calls signIn():

tsx
Copy
Edit
"use client";

import { useState } from "react";
import { signIn, signOut, useSession } from "next-auth/react";

export default function LoginPage() {
  const { data: session } = useSession();
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");

    const res = await signIn("credentials", {
      redirect: false,
      username,
      password,
    });

    if (!res?.ok) {
      setError("Invalid credentials. Please try again.");
    }
  };

  if (session) {
    return (
      <div>
        <p>Welcome, {session.user?.name}</p>
        <button onClick={() => signOut()}>Sign out</button>
      </div>
    );
  }

  return (
    <form onSubmit={handleSubmit}>
      <input
        type="text"
        value={username}
        onChange={(e) => setUsername(e.target.value)}
        placeholder="Username"
        required
      />
      <input
        type="password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
        placeholder="Password"
        required
      />
      <button type="submit">Login</button>
      {error && <p>{error}</p>}
    </form>
  );
}
üß† What Happens Under the Hood?
The user enters their Drupal username and password.

The signIn("credentials") call sends a POST request to your NextAuth credentials provider.

The credentials provider sends a POST to Drupal's /user/login?_format=json endpoint.

If valid, the response includes the user ID (uid) and username.

NextAuth returns a JWT-based session, and your app can now access the logged-in user via useSession().

‚ö†Ô∏è Common Pitfalls
Email vs Username: Drupal expects the username, not email.

SessionProvider: You must wrap your app in <SessionProvider> (see app/layout.tsx or app/providers.tsx).

Secure Routes: Use getServerSession() or useSession() to protect routes as needed.

üîí Optional Enhancements
Store Drupal‚Äôs csrf_token or logout_token in session or localStorage.

Add error feedback with styles.

Add "Remember me" functionality.

Fetch additional user details using Drupal JSON:API or GraphQL once authenticated.

‚úÖ Final Thoughts
With this setup, you can now authenticate real Drupal users in your Next.js frontend, and securely manage their sessions with NextAuth. This approach is simple, secure, and extensible for sites that integrate headless Drupal with modern React frontends.

